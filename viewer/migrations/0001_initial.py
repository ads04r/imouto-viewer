# Generated by Django 3.2.20 on 2024-07-02 20:03

import colorfield.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import viewer.functions.file_uploads


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AutoTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'autotag',
                'verbose_name_plural': 'autotags',
            },
        ),
        migrations.CreateModel(
            name='CalendarAppointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eventid', models.SlugField(blank=True, default='', max_length=255, unique=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('all_day', models.BooleanField(default=False)),
                ('data', models.TextField(blank=True, default='')),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'calendar appointment',
                'verbose_name_plural': 'calendar appointments',
            },
        ),
        migrations.CreateModel(
            name='CalendarFeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
            ],
            options={
                'verbose_name': 'calendar',
                'verbose_name_plural': 'calendars',
            },
        ),
        migrations.CreateModel(
            name='CalendarTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taskid', models.SlugField(blank=True, default='', max_length=255)),
                ('time_due', models.DateTimeField(blank=True, null=True)),
                ('time_created', models.DateTimeField(blank=True, null=True)),
                ('time_completed', models.DateTimeField(blank=True, null=True)),
                ('data', models.TextField(blank=True, default='')),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'calendar task',
                'verbose_name_plural': 'calendar tasks',
            },
        ),
        migrations.CreateModel(
            name='DataReading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('type', models.SlugField(max_length=32)),
                ('value', models.IntegerField()),
            ],
            options={
                'verbose_name': 'data reading',
                'verbose_name_plural': 'data readings',
            },
        ),
        migrations.CreateModel(
            name='Day',
            fields=[
                ('date', models.DateField(primary_key=True, serialize=False)),
                ('wake_time', models.DateTimeField(blank=True, null=True)),
                ('bed_time', models.DateTimeField(blank=True, null=True)),
                ('timezone_str', models.CharField(default='UTC', max_length=32)),
                ('cached_heart', models.TextField(blank=True, null=True)),
                ('cached_sleep', models.TextField(blank=True, null=True)),
                ('is_public_holiday', models.BooleanField(default=False)),
                ('sunrise_time', models.DateTimeField(blank=True, null=True)),
                ('sunset_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'day',
                'verbose_name_plural': 'days',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('type', models.SlugField(max_length=32)),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('geo', models.TextField(blank=True, default='')),
                ('cached_health', models.TextField(blank=True, default='')),
                ('cached_staticmap', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.event_staticmap_upload_location)),
                ('cached_step_count', models.IntegerField(default=0)),
                ('cached_distance', models.FloatField(default=0)),
                ('cached_average_speed', models.FloatField(default=0)),
                ('elevation', models.TextField(blank=True, default='')),
                ('speed', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'event',
                'verbose_name_plural': 'events',
            },
        ),
        migrations.CreateModel(
            name='EventSimilarity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diff_value', models.FloatField()),
            ],
            options={
                'verbose_name': 'event similarity',
                'verbose_name_plural': 'event similarities',
            },
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.SlugField(max_length=32, primary_key=True, serialize=False)),
                ('comment', models.TextField(blank=True, null=True)),
                ('colour', colorfield.fields.ColorField(default='#777777', image_field=None, max_length=25, samples=None)),
            ],
            options={
                'verbose_name': 'event tag',
                'verbose_name_plural': 'event tags',
            },
        ),
        migrations.CreateModel(
            name='EventWorkoutCategory',
            fields=[
                ('id', models.SlugField(max_length=32, primary_key=True, serialize=False)),
                ('label', models.CharField(default='', max_length=32)),
                ('comment', models.TextField(blank=True, null=True)),
                ('icon', models.SlugField(default='calendar', max_length=64)),
            ],
            options={
                'verbose_name': 'workout category',
                'verbose_name_plural': 'workout categories',
            },
        ),
        migrations.CreateModel(
            name='EventWorkoutCategoryStat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.SlugField(max_length=32)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'workout category statistic',
                'verbose_name_plural': 'workout category statistics',
            },
        ),
        migrations.CreateModel(
            name='GitCommit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repo_url', models.URLField()),
                ('commit_date', models.DateTimeField()),
                ('hash', models.SlugField(max_length=48, unique=True)),
                ('comment', models.TextField()),
                ('additions', models.IntegerField(blank=True, null=True)),
                ('deletions', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'git commit',
                'verbose_name_plural': 'git commits',
            },
        ),
        migrations.CreateModel(
            name='HistoricalEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('category', models.SlugField(max_length=32)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name': 'historical event',
                'verbose_name_plural': 'historical events',
            },
        ),
        migrations.CreateModel(
            name='ImportedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relative_path', models.CharField(max_length=512)),
                ('modified_time', models.DateTimeField()),
                ('import_time', models.DateTimeField(null=True)),
                ('file_size', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'imported file',
                'verbose_name_plural': 'imported files',
            },
        ),
        migrations.CreateModel(
            name='LifePeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateField()),
                ('end_time', models.DateField()),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('updated_time', models.DateTimeField(auto_now=True)),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('description', models.TextField(blank=True, default='')),
                ('colour', colorfield.fields.ColorField(default='#777777', image_field=None, max_length=25, samples=None)),
                ('type', models.SlugField(max_length=32)),
            ],
            options={
                'verbose_name': 'life period',
                'verbose_name_plural': 'life periods',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.SlugField(max_length=32, unique=True)),
                ('label', models.CharField(max_length=100)),
                ('full_label', models.CharField(default='', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('creation_time', models.DateTimeField(blank=True, null=True)),
                ('destruction_time', models.DateTimeField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('wikipedia', models.URLField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.location_thumbnail_upload_location)),
            ],
            options={
                'verbose_name': 'location',
                'verbose_name_plural': 'locations',
            },
        ),
        migrations.CreateModel(
            name='LocationCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('colour', colorfield.fields.ColorField(default='#777777', image_field=None, max_length=25, samples=None)),
            ],
            options={
                'verbose_name': 'location category',
                'verbose_name_plural': 'location categories',
            },
        ),
        migrations.CreateModel(
            name='LocationCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('wikipedia', models.URLField(blank=True, null=True)),
                ('cached_description', models.TextField(default='')),
                ('cached_description_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'city',
                'verbose_name_plural': 'cities',
            },
        ),
        migrations.CreateModel(
            name='LocationCountry',
            fields=[
                ('a2', models.SlugField(max_length=2, primary_key=True, serialize=False)),
                ('a3', models.SlugField(blank=True, max_length=3, null=True)),
                ('label', models.CharField(max_length=100)),
                ('wikipedia', models.URLField(blank=True, null=True)),
                ('cached_description', models.TextField(default='')),
                ('cached_description_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'country',
                'verbose_name_plural': 'countries',
            },
        ),
        migrations.CreateModel(
            name='LocationProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.SlugField(max_length=32)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'location property',
                'verbose_name_plural': 'location properties',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SlugField(max_length=16)),
                ('unique_id', models.SlugField(max_length=128)),
                ('label', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='MediaEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Month',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField(validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(1)])),
                ('year', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('uid', models.SlugField(max_length=32, primary_key=True, serialize=False)),
                ('given_name', models.CharField(blank=True, max_length=128, null=True)),
                ('family_name', models.CharField(blank=True, max_length=128, null=True)),
                ('nickname', models.CharField(blank=True, max_length=128, null=True)),
                ('wikipedia', models.URLField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.user_thumbnail_upload_location)),
                ('significant', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'person',
                'verbose_name_plural': 'people',
            },
        ),
        migrations.CreateModel(
            name='PersonCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('colour', colorfield.fields.ColorField(default='#777777', image_field=None, max_length=25, samples=None)),
            ],
            options={
                'verbose_name': 'person category',
                'verbose_name_plural': 'person categories',
            },
        ),
        migrations.CreateModel(
            name='PersonEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'person event',
                'verbose_name_plural': 'person events',
            },
        ),
        migrations.CreateModel(
            name='PersonPhoto',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'person photo',
                'verbose_name_plural': 'person photos',
            },
        ),
        migrations.CreateModel(
            name='PersonProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.SlugField(max_length=32)),
                ('value', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'person property',
                'verbose_name_plural': 'person properties',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(max_length=255, upload_to='')),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('cached_thumbnail', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.photo_thumbnail_upload_location)),
                ('face_count', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'photo',
                'verbose_name_plural': 'photos',
            },
        ),
        migrations.CreateModel(
            name='PhotoCollage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'photo collage',
                'verbose_name_plural': 'photo collages',
            },
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('description', models.TextField(default='')),
                ('intro_text', models.TextField(default='')),
                ('last_taken', models.DateTimeField(blank=True, null=True)),
                ('random_order', models.BooleanField(default=False)),
                ('enforce_answers', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'questionnaire',
                'verbose_name_plural': 'questionnaires',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField()),
                ('ordering', models.IntegerField()),
                ('reading_key', models.SlugField(max_length=32)),
                ('reading_value', models.IntegerField()),
            ],
            options={
                'verbose_name': 'question answer',
                'verbose_name_plural': 'question answers',
            },
        ),
        migrations.CreateModel(
            name='QuestionnaireQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('ordering', models.IntegerField()),
            ],
            options={
                'verbose_name': 'questionnaire question',
                'verbose_name_plural': 'questionnaire questions',
            },
        ),
        migrations.CreateModel(
            name='RemoteInteraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SlugField(max_length=32)),
                ('time', models.DateTimeField()),
                ('address', models.CharField(max_length=128)),
                ('incoming', models.BooleanField()),
                ('title', models.CharField(blank=True, default='', max_length=255)),
                ('message', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'remote interaction',
                'verbose_name_plural': 'remote interactions',
            },
        ),
        migrations.CreateModel(
            name='SchemaOrgClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=256)),
                ('uri', models.URLField()),
                ('comment', models.TextField()),
            ],
            options={
                'verbose_name': 'schema.org class',
                'verbose_name_plural': 'schema.org classes',
            },
        ),
        migrations.CreateModel(
            name='TagCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'tag condition',
                'verbose_name_plural': 'tag conditions',
            },
        ),
        migrations.CreateModel(
            name='WatchedDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=1024)),
                ('recursive', models.BooleanField(default=False)),
                ('file_regex', models.CharField(blank=True, max_length=512, null=True)),
                ('last_check', models.DateTimeField()),
                ('check_interval', models.IntegerField(default=300)),
                ('importer', models.SlugField(max_length=100)),
                ('source', models.SlugField(blank=True, default='', max_length=32)),
            ],
            options={
                'verbose_name': 'watched directory',
                'verbose_name_plural': 'watched directories',
            },
        ),
        migrations.CreateModel(
            name='WeatherLocation',
            fields=[
                ('id', models.SlugField(max_length=32, primary_key=True, serialize=False)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('api_id', models.SlugField(default='', max_length=32)),
                ('label', models.CharField(max_length=64)),
            ],
            options={
                'verbose_name': 'weather location',
                'verbose_name_plural': 'weather locations',
            },
        ),
        migrations.CreateModel(
            name='Year',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField()),
                ('caption', models.CharField(blank=True, default='', max_length=255)),
                ('cached_wordcloud', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.year_wordcloud_upload_location)),
                ('cached_pdf', models.FileField(blank=True, null=True, upload_to=viewer.functions.file_uploads.year_pdf_upload_location)),
                ('report_prc', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'year',
                'verbose_name_plural': 'years',
            },
        ),
        migrations.CreateModel(
            name='TagLocationCondition',
            fields=[
                ('tagcondition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='viewer.tagcondition')),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('cached_staticmap', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.tag_staticmap_upload_location)),
                ('cached_locationtext', models.TextField(default='')),
            ],
            options={
                'verbose_name': 'tag location condition',
                'verbose_name_plural': 'tag location conditions',
            },
            bases=('viewer.tagcondition',),
        ),
        migrations.CreateModel(
            name='TagTypeCondition',
            fields=[
                ('tagcondition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='viewer.tagcondition')),
                ('type', models.SlugField(max_length=32)),
            ],
            options={
                'verbose_name': 'tag type condition',
                'verbose_name_plural': 'tag type conditions',
            },
            bases=('viewer.tagcondition',),
        ),
        migrations.CreateModel(
            name='TagWorkoutCondition',
            fields=[
                ('tagcondition_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='viewer.tagcondition')),
            ],
            options={
                'verbose_name': 'tag workout condition',
                'verbose_name_plural': 'tag workout conditions',
            },
            bases=('viewer.tagcondition',),
        ),
        migrations.CreateModel(
            name='YearProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=128)),
                ('value', models.CharField(max_length=255)),
                ('category', models.SlugField(default='', max_length=32)),
                ('icon', models.SlugField(default='bar-chart', max_length=64)),
                ('description', models.TextField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='viewer.year')),
            ],
            options={
                'verbose_name': 'life report property',
                'verbose_name_plural': 'life report properties',
            },
        ),
        migrations.CreateModel(
            name='YearGraph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=128)),
                ('data', models.TextField(blank=True, default='')),
                ('category', models.SlugField(default='', max_length=32)),
                ('type', models.SlugField(default='bar', max_length=16)),
                ('icon', models.SlugField(default='bar-chart', max_length=64)),
                ('cached_image', models.ImageField(blank=True, null=True, upload_to=viewer.functions.file_uploads.report_graph_upload_location)),
                ('description', models.TextField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphs', to='viewer.year')),
            ],
            options={
                'verbose_name': 'year graph',
                'verbose_name_plural': 'year graphs',
            },
        ),
        migrations.CreateModel(
            name='YearChart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=128)),
                ('category', models.SlugField(default='', max_length=32)),
                ('data', models.TextField(default='[]')),
                ('description', models.TextField(blank=True, null=True)),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charts', to='viewer.year')),
            ],
            options={
                'verbose_name': 'year chart',
                'verbose_name_plural': 'year charts',
            },
        ),
        migrations.CreateModel(
            name='WeatherReading',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('description', models.CharField(blank=True, max_length=128, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('wind_direction', models.IntegerField(blank=True, null=True)),
                ('humidity', models.IntegerField(blank=True, null=True)),
                ('visibility', models.IntegerField(blank=True, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='viewer.weatherlocation')),
            ],
            options={
                'verbose_name': 'weather reading',
                'verbose_name_plural': 'weather readings',
            },
        ),
        migrations.AddIndex(
            model_name='weatherlocation',
            index=models.Index(fields=['label'], name='viewer_weat_label_79ce5d_idx'),
        ),
        migrations.AddField(
            model_name='tagcondition',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_viewer.tagcondition_set+', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='tagcondition',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='viewer.autotag'),
        ),
        migrations.AddField(
            model_name='schemaorgclass',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='viewer.schemaorgclass'),
        ),
        migrations.AddIndex(
            model_name='remoteinteraction',
            index=models.Index(fields=['type'], name='viewer_remo_type_c9dc7a_idx'),
        ),
        migrations.AddIndex(
            model_name='remoteinteraction',
            index=models.Index(fields=['address'], name='viewer_remo_address_334248_idx'),
        ),
        migrations.AddIndex(
            model_name='remoteinteraction',
            index=models.Index(fields=['time'], name='viewer_remo_time_19f6c6_idx'),
        ),
        migrations.AddIndex(
            model_name='remoteinteraction',
            index=models.Index(fields=['title'], name='viewer_remo_title_9ed17d_idx'),
        ),
        migrations.AddField(
            model_name='questionnairequestion',
            name='questionnaire',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='all_questions', to='viewer.questionnaire'),
        ),
        migrations.AddField(
            model_name='questionnaireanswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='all_answers', to='viewer.questionnairequestion'),
        ),
        migrations.AddField(
            model_name='photocollage',
            name='event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='photo_collages', to='viewer.event'),
        ),
        migrations.AddField(
            model_name='photocollage',
            name='photos',
            field=models.ManyToManyField(related_name='photo_collages', to='viewer.Photo'),
        ),
        migrations.AddField(
            model_name='photo',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='viewer.location'),
        ),
        migrations.AddField(
            model_name='photo',
            name='people',
            field=models.ManyToManyField(through='viewer.PersonPhoto', to='viewer.Person'),
        ),
        migrations.AddField(
            model_name='personproperty',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='viewer.person'),
        ),
        migrations.AddField(
            model_name='personphoto',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.person'),
        ),
        migrations.AddField(
            model_name='personphoto',
            name='photo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='viewer.photo'),
        ),
        migrations.AddField(
            model_name='personevent',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='viewer.event'),
        ),
        migrations.AddField(
            model_name='personevent',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.person'),
        ),
        migrations.AddField(
            model_name='personcategory',
            name='people',
            field=models.ManyToManyField(related_name='categories', to='viewer.Person'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['nickname'], name='viewer_pers_nicknam_04dc21_idx'),
        ),
        migrations.AddIndex(
            model_name='person',
            index=models.Index(fields=['given_name', 'family_name'], name='viewer_pers_given_n_bde36a_idx'),
        ),
        migrations.AddConstraint(
            model_name='month',
            constraint=models.UniqueConstraint(fields=('month', 'year'), name='month and year'),
        ),
        migrations.AddField(
            model_name='mediaevent',
            name='media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='viewer.media'),
        ),
        migrations.AddField(
            model_name='locationproperty',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='viewer.location'),
        ),
        migrations.AddField(
            model_name='locationcity',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cities', to='viewer.locationcountry'),
        ),
        migrations.AddField(
            model_name='locationcategory',
            name='locations',
            field=models.ManyToManyField(related_name='categories', to='viewer.Location'),
        ),
        migrations.AddField(
            model_name='locationcategory',
            name='schema_map',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories', to='viewer.schemaorgclass'),
        ),
        migrations.AddField(
            model_name='location',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='viewer.locationcity'),
        ),
        migrations.AddField(
            model_name='location',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='locations', to='viewer.locationcountry'),
        ),
        migrations.AddField(
            model_name='location',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='viewer.location'),
        ),
        migrations.AddField(
            model_name='location',
            name='weather_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='viewer.weatherlocation'),
        ),
        migrations.AddField(
            model_name='lifeperiod',
            name='cover_photo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='viewer.photo'),
        ),
        migrations.AddField(
            model_name='importedfile',
            name='watched_directory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='known_files', to='viewer.watcheddirectory'),
        ),
        migrations.AddField(
            model_name='eventworkoutcategorystat',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='viewer.eventworkoutcategory'),
        ),
        migrations.AddField(
            model_name='eventworkoutcategory',
            name='events',
            field=models.ManyToManyField(related_name='workout_categories', to='viewer.Event'),
        ),
        migrations.AddField(
            model_name='eventtag',
            name='events',
            field=models.ManyToManyField(related_name='tags', to='viewer.Event'),
        ),
        migrations.AddField(
            model_name='eventsimilarity',
            name='event1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_from', to='viewer.event'),
        ),
        migrations.AddField(
            model_name='eventsimilarity',
            name='event2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_to', to='viewer.event'),
        ),
        migrations.AddField(
            model_name='event',
            name='cover_photo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='viewer.photo'),
        ),
        migrations.AddField(
            model_name='event',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='viewer.location'),
        ),
        migrations.AddField(
            model_name='event',
            name='people',
            field=models.ManyToManyField(through='viewer.PersonEvent', to='viewer.Person'),
        ),
        migrations.AddIndex(
            model_name='datareading',
            index=models.Index(fields=['start_time'], name='viewer_data_start_t_e93f14_idx'),
        ),
        migrations.AddIndex(
            model_name='datareading',
            index=models.Index(fields=['end_time'], name='viewer_data_end_tim_ef3308_idx'),
        ),
        migrations.AddIndex(
            model_name='datareading',
            index=models.Index(fields=['type'], name='viewer_data_type_38caf9_idx'),
        ),
        migrations.AddField(
            model_name='calendartask',
            name='calendar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='viewer.calendarfeed'),
        ),
        migrations.AddField(
            model_name='calendarappointment',
            name='calendar',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='viewer.calendarfeed'),
        ),
        migrations.AddField(
            model_name='calendarappointment',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='appointments', to='viewer.location'),
        ),
        migrations.AddField(
            model_name='autotag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='viewer.eventtag'),
        ),
        migrations.AddIndex(
            model_name='yearproperty',
            index=models.Index(fields=['year'], name='viewer_year_year_id_0078f0_idx'),
        ),
        migrations.AddIndex(
            model_name='yearproperty',
            index=models.Index(fields=['key'], name='viewer_year_key_7c2add_idx'),
        ),
        migrations.AddIndex(
            model_name='yearproperty',
            index=models.Index(fields=['category'], name='viewer_year_categor_68184d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='yearproperty',
            unique_together={('year', 'key')},
        ),
        migrations.AddIndex(
            model_name='yeargraph',
            index=models.Index(fields=['year'], name='viewer_year_year_id_1883e2_idx'),
        ),
        migrations.AddIndex(
            model_name='yeargraph',
            index=models.Index(fields=['type'], name='viewer_year_type_73954f_idx'),
        ),
        migrations.AddIndex(
            model_name='yeargraph',
            index=models.Index(fields=['key'], name='viewer_year_key_90bc1a_idx'),
        ),
        migrations.AddIndex(
            model_name='yearchart',
            index=models.Index(fields=['year'], name='viewer_year_year_id_2fd1c9_idx'),
        ),
        migrations.AddIndex(
            model_name='yearchart',
            index=models.Index(fields=['text'], name='viewer_year_text_68691d_idx'),
        ),
        migrations.AddField(
            model_name='tagworkoutcondition',
            name='workout_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='viewer.eventworkoutcategory'),
        ),
        migrations.AddIndex(
            model_name='personproperty',
            index=models.Index(fields=['person'], name='viewer_pers_person__87e576_idx'),
        ),
        migrations.AddIndex(
            model_name='personproperty',
            index=models.Index(fields=['key'], name='viewer_pers_key_7f2b02_idx'),
        ),
        migrations.AddIndex(
            model_name='locationproperty',
            index=models.Index(fields=['location'], name='viewer_loca_locatio_2291b6_idx'),
        ),
        migrations.AddIndex(
            model_name='locationproperty',
            index=models.Index(fields=['key'], name='viewer_loca_key_0732e7_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['label'], name='viewer_loca_label_ff6b1f_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['full_label'], name='viewer_loca_full_la_7a1e57_idx'),
        ),
        migrations.AddIndex(
            model_name='eventsimilarity',
            index=models.Index(fields=['diff_value'], name='viewer_even_diff_va_d6965d_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventsimilarity',
            constraint=models.UniqueConstraint(fields=('event1', 'event2'), name='events to compare'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_time'], name='viewer_even_start_t_09ab29_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['end_time'], name='viewer_even_end_tim_2562c1_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['type'], name='viewer_even_type_23417a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendartask',
            unique_together={('taskid', 'calendar')},
        ),
    ]
